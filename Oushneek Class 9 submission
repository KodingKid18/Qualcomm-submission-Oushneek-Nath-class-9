import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk
import cv2
import numpy as np

class ReflectionRemoverApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Reflection Removal Tool")
        self.root.geometry("1920x1080")
        
        # Variables
        self.original_image = None
        self.processed_image = None
        self.current_image = None
        
        self.create_widgets()
        
    def create_widgets(self):
        # Main frame
        self.main_frame = ttk.Frame(self.root, padding="10")
        self.main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Buttons frame
        self.button_frame = ttk.Frame(self.main_frame)
        self.button_frame.grid(row=0, column=0, columnspan=2, pady=5)
        
        # Load image button
        self.load_btn = ttk.Button(
            self.button_frame, 
            text="Load Image",
            command=self.load_image
        )
        self.load_btn.grid(row=0, column=0, padx=5)
        
        # Process image button
        self.process_btn = ttk.Button(
            self.button_frame,
            text="Remove Reflection",
            command=self.remove_reflection,
            state=tk.DISABLED
        )
        self.process_btn.grid(row=0, column=1, padx=5)
        
        # Save image button
        self.save_btn = ttk.Button(
            self.button_frame,
            text="Save Image",
            command=self.save_image,
            state=tk.DISABLED
        )
        self.save_btn.grid(row=0, column=2, padx=5)
        
        # Reset button
        self.reset_btn = ttk.Button(
            self.button_frame,
            text="Reset",
            command=self.reset_image,
            state=tk.DISABLED
        )
        self.reset_btn.grid(row=0, column=3, padx=5)
        
        # Parameters frame
        self.param_frame = ttk.LabelFrame(self.main_frame, text="Parameters", padding="5")
        self.param_frame.grid(row=1, column=0, columnspan=2, pady=5, sticky=(tk.W, tk.E))
        
        # Sigma slider
        ttk.Label(self.param_frame, text="Sigma:").grid(row=0, column=0, padx=5)
        self.sigma_var = tk.DoubleVar(value=15.0)
        self.sigma_slider = ttk.Scale(
            self.param_frame,
            from_=5.0,
            to=30.0,
            orient=tk.HORIZONTAL,
            variable=self.sigma_var,
            length=200
        )
        self.sigma_slider.grid(row=0, column=1, padx=5)
        
        # Denoise strength slider
        ttk.Label(self.param_frame, text="Denoise:").grid(row=0, column=2, padx=5)
        self.denoise_var = tk.DoubleVar(value=3.0)
        self.denoise_slider = ttk.Scale(
            self.param_frame,
            from_=1.0,
            to=10.0,
            orient=tk.HORIZONTAL,
            variable=self.denoise_var,
            length=200
        )
        self.denoise_slider.grid(row=0, column=3, padx=5)
        
        # Image display
        self.canvas = tk.Canvas(self.main_frame, bg='gray', width=800, height=600)
        self.canvas.grid(row=2, column=0, columnspan=2, pady=5)

    def imflatfield(self, I, sigma):
        """Implementation of imflatfield for reflection removal"""
        try:
            A = I.astype(np.float32) / 255
            Ihsv = cv2.cvtColor(A, cv2.COLOR_BGR2HSV)
            A = Ihsv[:, :, 2]
            
            filterSize = int(2*np.ceil(2*sigma) + 1)
            shading = cv2.GaussianBlur(A, (filterSize, filterSize), sigma, borderType=cv2.BORDER_REFLECT)
            
            meanVal = np.mean(A)
            shading = np.maximum(shading, 1e-6)
            B = A*meanVal / shading
            
            Ihsv[:, :, 2] = B
            B = cv2.cvtColor(Ihsv, cv2.COLOR_HSV2BGR)
            B = np.round(np.clip(B*255, 0, 255)).astype(np.uint8)
            
            return B
        except Exception as e:
            messagebox.showerror("Error", f"Error in imflatfield: {str(e)}")
            return I

    def remove_reflection(self):
        if self.original_image is None:
            return
            
        try:
            # Get parameters from sliders
            sigma = self.sigma_var.get()
            denoise_strength = int(self.denoise_var.get())
            
            # Apply imflatfield
            flat_img = self.imflatfield(self.original_image, sigma)
            
            # Apply denoising
            denoised_flat_img = cv2.fastNlMeansDenoisingColored(
                flat_img, 
                None, 
                denoise_strength, 
                denoise_strength, 
                7, 
                21
            )
            
            # Sharpen the image
            blur = cv2.GaussianBlur(denoised_flat_img, (0, 0), 3)
            self.processed_image = cv2.addWeighted(denoised_flat_img, 1.5, blur, -0.5, 0)
            
            # Update display
            self.current_image = self.processed_image
            self.display_image(self.current_image)
            
            # Enable save button
            self.save_btn['state'] = tk.NORMAL
            
        except Exception as e:
            messagebox.showerror("Error", f"Error processing image: {str(e)}")
    
    def load_image(self):
        file_path = filedialog.askopenfilename(
            filetypes=[
                ("Image files", "*.png *.jpg *.jpeg *.bmp *.tiff")
            ]
        )
        
        if file_path:
            try:
                # Load and display image
                self.original_image = cv2.imread(file_path)
                if self.original_image is None:
                    raise ValueError("Could not load image!")
                    
                self.current_image = self.original_image.copy()
                self.display_image(self.current_image)
                
                # Enable buttons
                self.process_btn['state'] = tk.NORMAL
                self.reset_btn['state'] = tk.NORMAL
            except Exception as e:
                messagebox.showerror("Error", f"Error loading image: {str(e)}")
    
    def display_image(self, image):
        try:
            # Resize image to fit canvas while maintaining aspect ratio
            height, width = image.shape[:2]
            canvas_width = 800
            canvas_height = 600
            
            # Calculate scaling factor
            scale = min(canvas_width/width, canvas_height/height)
            new_width = int(width * scale)
            new_height = int(height * scale)
            
            # Resize image
            resized = cv2.resize(image, (new_width, new_height))
            
            # Convert from BGR to RGB
            rgb_image = cv2.cvtColor(resized, cv2.COLOR_BGR2RGB)
            
            # Convert to PhotoImage
            self.photo = ImageTk.PhotoImage(Image.fromarray(rgb_image))
            
            # Update canvas
            self.canvas.delete("all")
            self.canvas.create_image(
                canvas_width//2,
                canvas_height//2,
                image=self.photo,
                anchor=tk.CENTER
            )
        except Exception as e:
            messagebox.showerror("Error", f"Error displaying image: {str(e)}")
    
    def save_image(self):
        if self.processed_image is None:
            return
            
        file_path = filedialog.asksaveasfilename(
            defaultextension=".png",
            filetypes=[
                ("PNG files", "*.png"),
                ("JPEG files", "*.jpg"),
                ("All files", "*.*")
            ]
        )
        
        if file_path:
            try:
                cv2.imwrite(file_path, self.current_image)
                messagebox.showinfo("Success", "Image saved successfully!")
            except Exception as e:
                messagebox.showerror("Error", f"Error saving image: {str(e)}")
    
    def reset_image(self):
        if self.original_image is not None:
            self.current_image = self.original_image.copy()
            self.display_image(self.current_image)
            self.save_btn['state'] = tk.DISABLED

if __name__ == "__main__":
    try:
        root = tk.Tk()
        app = ReflectionRemoverApp(root)
        root.mainloop()
    except Exception as e:
        print(f"Application error: {str(e)}")
